package service

import (
	"context"
	"errors"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/oapi-codegen/runtime/types"
	service_codegen "keystone-go/pkg/reporting-public/codegen/service_codegen"
	service_codegen_dlh "keystone-go/pkg/reporting-dlh/codegen/service_codegen"
	"keystone-go/pkg/reporting-dlh/pkg/client"
	"keystone-go/pkg/reporting-dlh/pkg/client/mocks"
	"keystone-go/pkg/reporting-public/pkg/constants"
	"keystone-go/pkg/reporting-public/pkg/helpers"
)

// ✅ **Test ListBySubscriptionNumber**
func TestListBySubscriptionNumber(t *testing.T) {
	startDate, _ := time.Parse("2006-01-02", "2024-01-01")
	endDate, _ := time.Parse("2006-01-02", "2025-01-01")

	tests := []struct {
		name                                    string
		subscriptionNumbers                     []string
		getSubscriptionsBySubscriptionNumberFunc func(ctx context.Context, subscriptionNumbers []string) ([]service_codegen_dlh.SubscriptionBase, map[string]map[string]float64, error)
		getMultipleSubscriptionServiceLevelsFunc func(ctx context.Context, subscriptionNumbers []string) ([]client.ServiceLevelResponse, error)
		expected                                []service_codegen.Subscriptions
		err                                     error
	}{
		{
			name:                "TestListBySubscriptionNumberSuccess",
			subscriptionNumbers: []string{"sub-123"},
			getSubscriptionsBySubscriptionNumberFunc: func(ctx context.Context, subscriptionNumbers []string) ([]service_codegen_dlh.SubscriptionBase, map[string]map[string]float64, error) {
				sub := service_codegen_dlh.SubscriptionBase{
					AccountName:        "test-account",
					SubscriptionNumber: "sub-123",
					StartDate:          startDate,
					EndDate:            endDate,
				}
				return []service_codegen_dlh.SubscriptionBase{sub}, nil, nil
			},
			getMultipleSubscriptionServiceLevelsFunc: func(ctx context.Context, subscriptionNumbers []string) ([]client.ServiceLevelResponse, error) {
				return nil, nil
			},
			expected: []service_codegen.Subscriptions{
				{
					Subscription: service_codegen.SubscriptionBase{
						EndDate:     endDate,
						StartDate:   startDate,
						Number:      "sub-123",
						AccountName: "test-account",
					},
					ServiceLevels: nil,
				},
			},
			err: nil,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			mockFooterClient := mocks.FooterClientMock{
				GetSubscriptionsBySubscriptionNumbersFunc: test.getSubscriptionsBySubscriptionNumberFunc,
				GetMultiSubscriptionServiceLevelsFunc:     test.getMultipleSubscriptionServiceLevelsFunc,
			}

			service := NewSubscriptionServices(&mockFooterClient)
			subs, err := service.ListBySubscriptionNumber(context.Background(), test.subscriptionNumbers)

			assert.Equal(t, test.expected, subs)
			assert.Equal(t, test.err, err)
		})
	}
}

// ✅ **Test ListSubscriptionServiceLevels**
func TestListSubscriptionServiceLevels(t *testing.T) {
	tests := []struct {
		name                        string
		subscriptionNumbers         []string
		getSubscriptionServiceLevels func(ctx context.Context, subscriptionNumbers []string) ([]client.ServiceLevelResponse, error)
		expected                    []service_codegen.SubscriptionServiceLevels
		err                         error
	}{
		{
			name:                "TestListSubscriptionServiceLevelsSuccess",
			subscriptionNumbers: []string{"sub-123"},
			getSubscriptionServiceLevels: func(ctx context.Context, subscriptionNumbers []string) ([]client.ServiceLevelResponse, error) {
				return []client.ServiceLevelResponse{
					{Name: "premium", CommittedBytes: 1024, SubscriptionNumber: helpers.StringPointer("sub-123")},
				}, nil
			},
			expected: []service_codegen.SubscriptionServiceLevels{
				{
					Subscription: service_codegen.SubscriptionBase{Number: "sub-123"},
					ServiceLevels: []service_codegen.ServiceLevel{
						{Name: "premium", CommittedTib: 1024 / constants.TiB},
					},
				},
			},
			err: nil,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			mockFooterClient := mocks.FooterClientMock{
				GetMultiSubscriptionServiceLevelsFunc: test.getSubscriptionServiceLevels,
			}

			service := NewSubscriptionServices(&mockFooterClient)
			serviceLevels, err := service.ListSubscriptionServiceLevels(context.Background(), test.subscriptionNumbers)

			assert.Equal(t, test.expected, serviceLevels)
			assert.Equal(t, test.err, err)
		})
	}
}

// ✅ **Test GetServiceLevelCapacityUsagesBySubscription**
func TestGetServiceLevelCapacityUsagesBySubscription(t *testing.T) {
	fromDate := types.Date{Time: time.Now().AddDate(0, -1, 0)}
	toDate := types.Date{Time: time.Now()}

	tests := []struct {
		name                          string
		subscriptionNumbers           []string
		getServiceLevelCapacityUsage  func(ctx context.Context, subscriptionNumbers []string, fromDate *types.Date, toDate *types.Date) ([]service_codegen.ServiceLevelHistoricalConsumptions, error)
		expected                      []service_codegen.ServiceLevelHistoricalConsumptions
		err                           error
	}{
		{
			name:                "TestGetServiceLevelCapacityUsagesSuccess",
			subscriptionNumbers: []string{"sub-123"},
			getServiceLevelCapacityUsage: func(ctx context.Context, subscriptionNumbers []string, fromDate *types.Date, toDate *types.Date) ([]service_codegen.ServiceLevelHistoricalConsumptions, error) {
				return []service_codegen.ServiceLevelHistoricalConsumptions{
					{
						Subscription: service_codegen.SubscriptionBase{Number: "sub-123"},
						ServiceLevels: []service_codegen.ServiceLevelHistoricalConsumption{
							{Name: "premium"},
						},
					},
				}, nil
			},
			expected: []service_codegen.ServiceLevelHistoricalConsumptions{
				{
					Subscription: service_codegen.SubscriptionBase{Number: "sub-123"},
					ServiceLevels: []service_codegen.ServiceLevelHistoricalConsumption{
						{Name: "premium"},
					},
				},
			},
			err: nil,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			mockFooterClient := mocks.FooterClientMock{
				GetServiceLevelCapacityUsagesBySubscriptionFunc: test.getServiceLevelCapacityUsage,
			}

			service := NewSubscriptionServices(&mockFooterClient)
			usages, err := service.GetServiceLevelCapacityUsagesBySubscription(context.Background(), test.subscriptionNumbers, &fromDate, &toDate)

			assert.Equal(t, test.expected, usages)
			assert.Equal(t, test.err, err)
		})
	}
}
