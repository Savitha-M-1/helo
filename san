package service

import (
	"context"
	"errors"
	"testing"
	"time"

	service_codegen_dlh "keystone-go/pkg/reporting-dlh/codegen/service_codegen"
	"keystone-go/pkg/reporting-dlh/pkg/client"
	"keystone-go/pkg/reporting-dlh/pkg/client/mocks"
	service_codegen "keystone-go/pkg/reporting-public/codegen/service_codegen"
	"keystone-go/pkg/reporting-public/pkg/constants"
	"keystone-go/pkg/reporting-public/pkg/helpers"

	"github.com/stretchr/testify/assert"
)

// Test ListBySubscriptionNumber
func TestListBySubscriptionNumber(t *testing.T) {
	startDate, _ := time.Parse("2006-01-02", "2024-01-01")
	endDate, _ := time.Parse("2006-01-02", "2025-01-01")

	tests := []struct {
		name                                     string
		description                              string
		subscriptionNumbers                      []string
		getSubscriptionsBySubscriptionNumberFunc func(ctx context.Context, subscriptionNumbers []string) ([]service_codegen_dlh.SubscriptionBase, map[string]map[string]float64, error)
		getMultipleSubscriptionServiceLevelsFunc func(ctx context.Context, subscriptionNumbers []string) ([]client.ServiceLevelResponse, error)
		expected                                 []service_codegen.Subscriptions
		err                                      error
	}{
		{
			name:                "TestListBySubscriptionNumberSuccess",
			description:         "Test successful retrieval of subscriptions",
			subscriptionNumbers: []string{"sub-123"},
			getSubscriptionsBySubscriptionNumberFunc: func(ctx context.Context, subscriptionNumbers []string) ([]service_codegen_dlh.SubscriptionBase, map[string]map[string]float64, error) {
				sub := service_codegen_dlh.SubscriptionBase{
					AccountName:        "test-account",
					SubscriptionNumber: "sub-123",
					StartDate:          startDate,
					EndDate:            endDate,
				}
				return []service_codegen_dlh.SubscriptionBase{sub}, nil, nil
			},
			getMultipleSubscriptionServiceLevelsFunc: func(ctx context.Context, subscriptionNumbers []string) ([]client.ServiceLevelResponse, error) {
				return nil, nil
			},
			expected: []service_codegen.Subscriptions{
				{
					Subscription: service_codegen.SubscriptionBase{
						EndDate:     endDate,
						StartDate:   startDate,
						Number:      "sub-123",
						AccountName: "test-account",
					},
					ServiceLevels: nil,
				},
			},
			err: nil,
		},
		{
			name:                "TestListBySubscriptionNumberNotFound",
			description:         "Test subscription not found",
			subscriptionNumbers: []string{"sub-456"},
			getSubscriptionsBySubscriptionNumberFunc: func(ctx context.Context, subscriptionNumbers []string) ([]service_codegen_dlh.SubscriptionBase, map[string]map[string]float64, error) {
				return nil, nil, client.ErrorSubscriptionNotFound
			},
			getMultipleSubscriptionServiceLevelsFunc: func(ctx context.Context, subscriptionNumbers []string) ([]client.ServiceLevelResponse, error) {
				return nil, client.ErrorSubscriptionNotFound
			},
			expected: nil,
			err:      client.ErrorSubscriptionNotFound,
		},
		{
			name:                "TestListBySubscriptionNumberWithServiceLevels",
			description:         "Test retrieval of subscriptions with service levels",
			subscriptionNumbers: []string{"sub-789"},
			getSubscriptionsBySubscriptionNumberFunc: func(ctx context.Context, subscriptionNumbers []string) ([]service_codegen_dlh.SubscriptionBase, map[string]map[string]float64, error) {
				sub := service_codegen_dlh.SubscriptionBase{
					AccountName:        "test-account",
					SubscriptionNumber: "sub-789",
					StartDate:          startDate,
					EndDate:            endDate,
				}
				return []service_codegen_dlh.SubscriptionBase{sub}, map[string]map[string]float64{
					"sub-789": {
						"premium": 8192,
					},
				}, nil
			},
			getMultipleSubscriptionServiceLevelsFunc: func(ctx context.Context, subscriptionNumbers []string) ([]client.ServiceLevelResponse, error) {
				return []client.ServiceLevelResponse{
					{
						Name:               "premium",
						CommittedBytes:     8192,
						SubscriptionNumber: helpers.StringPointer("sub-789"),
					},
				}, nil
			},
			expected: []service_codegen.Subscriptions{
				{
					Subscription: service_codegen.SubscriptionBase{
						EndDate:     endDate,
						StartDate:   startDate,
						Number:      "sub-789",
						AccountName: "test-account",
					},
					ServiceLevels: []service_codegen.ServiceLevelBase{
						{
							Name:         "premium",
							CommittedTib: 8192 / constants.TiB,
						},
					},
				},
			},
			err: nil,
		},
		{
			name:                "TestListBySubscriptionNumberError",
			description:         "Test error while retrieving subscriptions",
			subscriptionNumbers: []string{"sub-999"},
			getSubscriptionsBySubscriptionNumberFunc: func(ctx context.Context, subscriptionNumbers []string) ([]service_codegen_dlh.SubscriptionBase, map[string]map[string]float64, error) {
				return nil, nil, errors.New("unexpected error")
			},
			getMultipleSubscriptionServiceLevelsFunc: func(ctx context.Context, subscriptionNumbers []string) ([]client.ServiceLevelResponse, error) {
				return nil, errors.New("unexpected error")
			},
			expected: nil,
			err:      errors.New("unexpected error"),
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			mockFooterClient := mocks.FooterClientMock{
				GetSubscriptionsBySubscriptionNumbersFunc: test.getSubscriptionsBySubscriptionNumberFunc,
				GetMultiSubscriptionServiceLevelsFunc:     test.getMultipleSubscriptionServiceLevelsFunc,
			}

			service := NewSubscriptionServices(&mockFooterClient)
			subs, err := service.ListBySubscriptionNumber(context.Background(), test.subscriptionNumbers)

			assert.Equal(t, test.expected, subs)
			assert.Equal(t, test.err, err)
		})
	}
}
