package service

import (
	"context"
	"errors"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/oapi-codegen/runtime/types"
	service_codegen "keystone-go/pkg/reporting-public/codegen/service_codegen"
	service_codegen_dlh "keystone-go/pkg/reporting-dlh/codegen/service_codegen"
	"keystone-go/pkg/reporting-dlh/pkg/client"
	"keystone-go/pkg/reporting-dlh/pkg/client/mocks"
	"keystone-go/pkg/reporting-public/pkg/constants"
)

// âœ… **Test GetServiceLevelCapacityUsagesBySubscription**
func TestGetServiceLevelCapacityUsagesBySubscription(t *testing.T) {
	fromDate := types.Date{Time: time.Now().AddDate(0, -1, 0)}
	toDate := types.Date{Time: time.Now()}

	tests := []struct {
		name                          string
		subscriptionNumbers           []string
		getServiceLevelCapacityUsage  func(ctx context.Context, subscriptionNumber string, serviceLevel []service_codegen_dlh.ServiceLevelNameWithAll, fromDate time.Time, toDate time.Time, step string) (service_codegen_dlh.SubscriptionCapacityUsage, error)
		expected                      []service_codegen.ServiceLevelHistoricalConsumptions
		err                           error
	}{
		{
			name:                "TestGetServiceLevelCapacityUsagesSuccess",
			subscriptionNumbers: []string{"sub-123"},
			getServiceLevelCapacityUsage: func(ctx context.Context, subscriptionNumber string, serviceLevel []service_codegen_dlh.ServiceLevelNameWithAll, fromDate time.Time, toDate time.Time, step string) (service_codegen_dlh.SubscriptionCapacityUsage, error) {
				return service_codegen_dlh.SubscriptionCapacityUsage{
					ServiceLevelCapacityUsage: []service_codegen_dlh.ServiceLevelCapacityUsage{
						{
							ServiceLevel: "premium",
						},
					},
				}, nil
			},
			expected: []service_codegen.ServiceLevelHistoricalConsumptions{
				{
					Subscription: service_codegen.SubscriptionBase{Number: "sub-123"},
					ServiceLevels: []service_codegen.ServiceLevelHistoricalConsumption{
						{Name: "premium"},
					},
				},
			},
			err: nil,
		},
		{
			name:                "TestGetServiceLevelCapacityUsagesNotFound",
			subscriptionNumbers: []string{"sub-456"},
			getServiceLevelCapacityUsage: func(ctx context.Context, subscriptionNumber string, serviceLevel []service_codegen_dlh.ServiceLevelNameWithAll, fromDate time.Time, toDate time.Time, step string) (service_codegen_dlh.SubscriptionCapacityUsage, error) {
				return service_codegen_dlh.SubscriptionCapacityUsage{}, client.ErrorSubscriptionNotFound
			},
			expected: nil,
			err:      client.ErrorSubscriptionNotFound,
		},
		{
			name:                "TestGetServiceLevelCapacityUsagesError",
			subscriptionNumbers: []string{"sub-789"},
			getServiceLevelCapacityUsage: func(ctx context.Context, subscriptionNumber string, serviceLevel []service_codegen_dlh.ServiceLevelNameWithAll, fromDate time.Time, toDate time.Time, step string) (service_codegen_dlh.SubscriptionCapacityUsage, error) {
				return service_codegen_dlh.SubscriptionCapacityUsage{}, errors.New("unexpected error")
			},
			expected: nil,
			err:      errors.New("unexpected error"),
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			mockFooterClient := mocks.FooterClientMock{
				GetCapacityUsageFunc: func(ctx context.Context, subscriptionNumber string, serviceLevel string, fromDate time.Time, toDate time.Time, step string) ([]service_codegen_dlh.HistoricalUsage, error) {
					// Simulating the behavior of GetServiceLevelCapacityUsagesBySubscription based on test case
					capacityUsage, err := test.getServiceLevelCapacityUsage(ctx, subscriptionNumber, []service_codegen_dlh.ServiceLevelNameWithAll{service_codegen_dlh.ServiceLevelNameWithAllAll}, fromDate, toDate, step)
					if err != nil {
						return nil, err
					}
					// Convert to the expected return type (HistoricalUsage slice)
					var historicalUsages []service_codegen_dlh.HistoricalUsage
					for _, slUsage := range capacityUsage.ServiceLevelCapacityUsage {
						historicalUsages = append(historicalUsages, service_codegen_dlh.HistoricalUsage{
							Timestamp: time.Now().Format(time.RFC3339),
							ServiceLevel: service_codegen_dlh.ServiceLevelName(slUsage.ServiceLevel),
						})
					}
					return historicalUsages, nil
				},
			}

			service := NewSubscriptionServices(&mockFooterClient)
			usages, err := service.GetServiceLevelCapacityUsagesBySubscription(context.Background(), test.subscriptionNumbers, &fromDate, &toDate)

			assert.Equal(t, test.expected, usages)
			assert.Equal(t, test.err, err)
		})
	}
}
